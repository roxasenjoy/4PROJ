security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

        jwt:
            lexik_jwt:
                class: App\Entity\User
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        refresh:
            pattern:  ^/api/token/refresh
            stateless: true

        login:
            pattern: ^/api/login
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: api_login #Valider les authentifications
                success_handler: lexik_jwt_authentication.handler.authentication_success #Class à utiliser quand on arrive à se connecter
                failure_handler: lexik_jwt_authentication.handler.authentication_failure #Class à utiliser quand on n'arrive pas à se connecter

        api:
            pattern:   ^/api
            stateless: true
            provider: jwt
            jwt: ~


        main:
            json_login:
                provider: app_user_provider
                check_path: login
                username_path: security.credentials.login
                password_path: security.credentials.password

            logout:
                path: /logout
                target: /login
                invalidate_session: true
            custom_authenticator: App\Security\LoginFormAuthenticator
            access_denied_handler: App\Security\AccessDeniedHandler

    role_hierarchy:
        IS_AUTHENTICATED_ANONYMOUSLY: IS_AUTHENTICATED_ANONYMOUSLY
        ROLE_ADMIN: [ROLE_ADMIN]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: PUBLIC_ACCESS   }

        #L'utilisateur n'a pas de compte
        - { path: ^/reset-password, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }



        # Accès TEACHER
        - { path: ^/teacher/cours, role: [ ROLE_TEACHER ] }
        - { path: ^/settings, role: [ ROLE_TEACHER ] }

        # Accès Admin
        - { path: ^/admin, role: [ ROLE_PEDAGO, ROLE_ADMIN ] }






        #Page: Offres entreprises
        - { path: ^/admin/offer/details/\d+$, role: [ROLE_PEDAGO, ROLE_ADMIN] }

        #Intervenants
        - { path: ^/offres/add, role: [ROLE_PEDAGO, ROLE_ADMIN] }
        - { path: ^/offres/edit/\d+$, role: [ROLE_PEDAGO, ROLE_ADMIN] }
        - { path: ^/offres/remove/\d+$, role: [ROLE_PEDAGO, ROLE_ADMIN] }

        #L'utilisateur est connecté est possede un rôle
        - { path: ^/, role: [ ROLE_USER, ROLE_PEDAGO, ROLE_ADMIN, ROLE_TEACHER ] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
